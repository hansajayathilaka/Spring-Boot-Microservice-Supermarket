version: '3'
services:

  ### Services ###
  discovery-server:
    container_name: discovery-server
    build:
      context: ./discovery-server/
    ports:
      - "8761:8761"

  api-gateway:
    container_name: api-gateway
    build:
      context: ./api-gateway/
    environment:
      - server.port=80
      - eureka.client.serviceUrl.defaultZone=http://discovery-server:8761/eureka
    ports:
      - "8080:80"
    expose:
      - "80"
    depends_on:
      - discovery-server

  delivery-service:
    container_name: delivery-service
    build:
      context: ./delivery-service/
    environment:
      - server.port=80
      - eureka.client.serviceUrl.defaultZone=http://discovery-server:8761/eureka
      - spring.data.mongodb.host=mongo-deliveryservice
      - spring.data.mongodb.port=27017
      - spring.data.mongodb.database=delivery-db
      - spring.kafka.bootstrap-servers=kafka:29092
      - spring.kafka.consumer.group-id=delivery-id
    ports:
      - "8081:80"
    expose:
      - "80"
    depends_on:
      - discovery-server
      - mongo-deliveryservice
      - kafka

  inventory-service:
    container_name: inventory-service
    build:
      context: ./inventory-service/
    environment:
      - server.port=80
      - eureka.client.serviceUrl.defaultZone=http://discovery-server:8761/eureka
      - spring.data.mongodb.host=mongo-inventoryservice
      - spring.data.mongodb.port=27017
      - spring.data.mongodb.database=inventory-db
      - spring.kafka.bootstrap-servers=kafka:29092
      - spring.kafka.consumer.group-id=inventory-id
    ports:
      - "8082:80"
    expose:
      - "80"
    depends_on:
      - discovery-server
      - mongo-inventoryservice
      - kafka

  order-service:
    container_name: order-service
    build:
      context: ./order-service/
    environment:
      - server.port=80
      - eureka.client.serviceUrl.defaultZone=http://discovery-server:8761/eureka
      - spring.data.mongodb.host=mongo-orderservice
      - spring.data.mongodb.port=27017
      - spring.data.mongodb.database=order-db
      - spring.kafka.bootstrap-servers=kafka:29092
      - spring.kafka.consumer.group-id=order-id
    ports:
      - "8083:80"
    expose:
      - "80"
    depends_on:
      - discovery-server
      - mongo-orderservice
      - kafka

  user-service:
    container_name: user-service
    build:
      context: ./user-service/
    environment:
      - server.port=80
      - eureka.client.serviceUrl.defaultZone=http://discovery-server:8761/eureka
      - spring.data.mongodb.host=mongo-userservice
      - spring.data.mongodb.port=27017
      - spring.data.mongodb.database=user-db
      - spring.kafka.bootstrap-servers=kafka:29092
      - spring.kafka.consumer.group-id=user-id
    ports:
      - "8084:80"
    expose:
      - "80"
    depends_on:
      - discovery-server
      - mongo-userservice
      - kafka


  ### Dependencies ###
  postgres-authservice:
    container_name: postgres-authservice
    image: postgres
    environment:
      POSTGRES_DB: auth-service
      POSTGRES_USER: authservice-user
      POSTGRES_PASSWORD: 123456
      PGDATA: /data/postgres
    volumes:
      - ./data/postgres-authservice:/data/postgres
    expose:
      - "5432"
    ports:
      - "5431:5432"
    restart: unless-stopped

  mongo-deliveryservice:
    container_name: mongo-deliveryservice
    image: mongo:latest
    restart: unless-stopped
    ports:
      - "27018:27017"
    expose:
      - "27017"
    volumes:
      - ./data/mongo-deliveryservice:/data/db

  mongo-inventoryservice:
    container_name: mongo-inventoryservice
    image: mongo:latest
    restart: unless-stopped
    ports:
      - "27019:27017"
    expose:
      - "27017"
    volumes:
      - ./data/mongo-inventoryservice:/data/db

  mongo-orderservice:
    container_name: mongo-orderservice
    image: mongo:latest
    restart: unless-stopped
    ports:
      - "27020:27017"
    expose:
      - "27017"
    volumes:
      - ./data/mongo-orderservice:/data/db

  mongo-userservice:
    container_name: mongo-userservice
    image: mongo:latest
    restart: unless-stopped
    ports:
      - "27021:27017"
    expose:
      - "27017"
    volumes:
      - ./data/mongo-userservice:/data/db

  zookeeper:
    image: zookeeper:3.7.0
    container_name: zookeeper
    restart: "no"
    ports:
      - "2181:2181"

  kafka:
    image: obsidiandynamics/kafka
    container_name: kafka
    restart: "no"
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: DOCKER_INTERNAL://:29092,DOCKER_EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka:29092,DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - "kafka"


networks:
    default:
        driver: supermarket-network
